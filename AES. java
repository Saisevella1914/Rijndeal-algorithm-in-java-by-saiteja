6. Write a JAVA Program to implement the Rijndeal algorithm logic.

import javax.crypto.Cipher;

import javax.crypto.KeyGenerator;

import javax.crypto.SecretKey;

import javax.xml.bind.DatatypeConverter;

public class AES

{

public static void main(String[] args) throws Exception

{

String plainText = "Hello world";

SecretKey seckey = getSecretEncryptionKey();

byte[] cipherText = encryptText(plainText,seckey);

String decryptedText = decryptText(cipher Text, seckey);

System.out.println("Original Text:" + plainText);

System.out.println("AESkey(Hex form):"+bytesToHex(seckey.getEncoded()));

System.out.println("Encrypted Text(Hex form):"+bytes ToHex(cipher Text));

System.out.println("DecryptedText:" + decryptedText);

}

public static SecretKey getSecret EncryptionKey() throws Exception

{

KeyGenerator generator KeyGenerator.getInstance("AES");

generator.init(128);

SecretKey seckey = generator.generateKey();

return seckey;

}

public static byte[] encryptText(String plainText, SecretKey seckey) throws Exception

{

Cipher aesCipher = Cipher.getInstance("AES");
aesCipher.init(Cipher. ENCRYPT_MODE, seckey);

byte[] byteCipherText = aesCipher.doFinal (plainText.getBytes());

return byteCipher Text;

}

public static String decryptText (byte[] bytecipher Text, SecretKey seckey) throws Exception

{

Cipher aesCipher Cipher.getInstance("AES");

aesCipher.init(Cipher. DECRYPT_MODE, seckey);

byte[] bytePlainText = aesCipher.doFinal (bytecipher Text);

return new String(byte PlainText);

}

private static String bytes ToHex (byte[] hash)

{

return DatatypeConverter.printHexBinary(hash);

}

}

OUTPUT:

Original Text:Hello world

AESkey(Hex form): 06664F3A50A3F333048F40E7BC0F76BC

Encrypted Text(Hex form):B953FD4CA02B9F82C5A571A0F7975672

Decrypted Text: Hello world
